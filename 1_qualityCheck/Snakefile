

subworkflow downloadReference:
    workdir: "../data/referenceGenome"
    snakefile: "../data/referenceGenome/Snakefile"


import datetime as dt
now=dt.datetime.now()
date=now.strftime('%Y-%m-%d')
time=now.strftime('%H:%M:%S')

SAMPLES = set()

#### get sample names from server
#import ftplib as ftp # Dateien vom Server holen / import JSONs from server
#import os
#json_server=ftp.FTP(config['url'])
#json_server.login(config['login'],config['password'])
#
#directory='/'
#json_server.cwd(directory)
#ftp_filelist=json_server.nlst(directory)
#
#directory='/'
#json_server.cwd(directory)
#ftp_filelist=json_server.nlst(directory)
#
## iterate over remote files
#for filename in ftp_filelist:
#    if filename[-5:]=='.json':
#        SAMPLES.add(os.path.splitext(filename)[0])


debug="Results"
jsonsoriginal="json/original"
mappedjsons="json/mapped"
results="json/currated"

onstart:
    print("Start running backup")
    shell(
    """
    mkdir -p json/backup;
	mkdir -p {jsonsoriginal}
    touch {jsonsoriginal}/empty.json;
    tar -cvzf json/backup/original{date}{time}.tar.gz {jsonsoriginal}/*.json;
    rm {jsonsoriginal}/empty.json;
	mkdir -p {results}
    touch {results}/empty.json;
    tar -cvzf json/backup/currated{date}{time}.tar.gz {results}/*.json;
    rm {results}/empty.json;
	mkdir -p {mappedjsons}
    touch {mappedjsons}/empty.json;
    tar -cvzf json/backup/original{date}{time}.tar.gz {mappedjsons}/*.json;
    rm {mappedjsons}/empty.json;
    """
    )
    print("Backup ready")

rule all:
    input:
        "pyhgvs/hgvs/pyhgvs/data/genes.refGene",
        expand("json/original/{sample}.json", sample=SAMPLES),
        "variants.vcf",
        "config.yml",
        "pyhgvs/pygr.done",
        touch(results+"/currated.done"),
        expand("json/currated/{sample}.json", sample=SAMPLES)


# download and install pyhgvs. Really old library to manage hgvs but right now there is no good alternative
# Maybe "hgvs" But it seems to be difficult to run behind a proxy.
rule pyhgvs:
    input:
    conda:
        "envs/python2.7.yml"
    output:
        "pyhgvs/hgvs/pyhgvs/data/genes.refGene"
    shell:
        """
        mkdir -p pyhgvs;
        cd pyhgvs;
        rm -rf hgvs;
        git clone https://github.com/counsyl/hgvs.git;
        cd hgvs;
        python setup.py install;
        """

rule install_dependencies:
    input:
        "pyhgvs/hgvs/pyhgvs/data/genes.refGene"
    conda:
        "envs/python2.7.yml"
    output:
        temp(touch("dependencies.done"))
    shell:
        """
        python -c "import xlrd";
        if [ `echo $?` != 0 ]; then pip install xlrd; fi;

        python -c "import pygr";
        if [ `echo $?` != 0 ]; then pip install pygr; fi;

        python -c "import xlwt";
        if [ `echo $?` != 0 ]; then pip install xlwt; fi;

        python -c "import pyhgvs";
        if [ `echo $?` != 0 ]; then cd pyhgvs/hgvs && python setup.py install; fi;
        """

# Download jsons
rule downloadJSONs:
    input:
        script="scripts/download.py"
    params:
        output="json/original/"
    shell:
        """
        python {input.script} {params.output}
        """

#Mapping to old JSON-Format

rule runMapping:
    input:
        scripts="scripts/mapping.py"
    output:
        touch("Mapping.done")
    params:
        jsonsoriginal=jsonsoriginal,
        mappedjsons=mappedjsons,
        vcf_folder="../data/PEDIA/vcfs/original/"
    shell:
        """
        python {input.scripts} --jsonsoriginal {params.jsonsoriginal} --mappedjsons {params.mappedjsons} --vcf {params.vcf_folder}
        """

# Run the quality check.
rule runQuality:
    input:
        script="scripts/JsonsQC.py",
        mapping = "Mapping.done",
        log="QC_progress.xls",
        genome=downloadReference("data/hg19.fa"),
        genomeidx=downloadReference("data/hg19.fa.fai"),
        libraries="dependencies.done",
        genefile="pyhgvs/hgvs/pyhgvs/data/genes.refGene",
        errordict="hgvs_errordict.json",
    output:
        vcf="variants.vcf",
        config="config.yml",
        currated=touch(results+"/currated.done")
        #jsons=expand("json/currated/{sample}.json", sample=SAMPLES)
    params:
        debug=debug,
        mappedjsons=mappedjsons,
        results=results
    conda:
        "envs/python2.7.yml"
    shell:
        """
        python {input.script} --mappedjsons {params.mappedjsons} --log {input.log} --genomefile {input.genome} --debugfolder {params.debug} --genefile {input.genefile} --jsoncurrated {params.results} --errordict {input.errordict} --vcf {output.vcf} --config {output.config}
        """
