
CONTIGS=["chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY","chrMT"]
AUTOSOMES=["chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22"]

BACKGROUNDS = ["ExAC","1KG","IRAN"]

rule all:
	input:
		"data/refseq/ref_GRCh37.p13_top_level.bed.gz",
		"data/refseq/ref_GRCh37.p13_top_level.bed.gz.tbi",
		expand("data/1KG/1KG_{contig}.refSeq105.vcf.gz", contig=CONTIGS),
		expand("data/1KG/1KG_{contig}.refSeq105.vcf.gz.tbi", contig=CONTIGS),
		"results/ExAC/ExAC.refSeq105.vcf.gz",
		"results/ExAC/ExAC.refSeq105.vcf.gz.tbi",
		"results/IRAN/IRAN_merge.vcf.gz",
		"results/IRAN/IRAN_merge_corref.vcf.gz",
		"results/IRAN/IRAN_merge_corref.vcf.gz.tbi",
		"results/IRAN/IRAN.refSeq105.vcf.gz",
		"results/IRAN/IRAN.refSeq105.vcf.gz.tbi",
		expand("results/{background}/{background}.refSeq105.vcf.gz", background=BACKGROUNDS),
		expand("results/{background}/{background}.refSeq105.vcf.gz.tbi",background=BACKGROUNDS),
		expand("results/{background}/{background}.refSeq105.AF.vcf.gz",background=BACKGROUNDS),
		expand("results/{background}/{background}.refSeq105.AF.vcf.gz.tbi",background=BACKGROUNDS),
#		"results/1KG/1KG.refSeq105.AF.filter.vcf.gz",
#		"results/1KG/1KG.refSeq105.AF.filter.vcf.gz.tbi,"


#### 1KG Samples ###

rule download_refSeq:
	input:
	output:
		"data/refseq/ref_GRCh37.p13_top_level.gff3.gz"
	shell:
		"curl ftp://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/H_sapiens/ARCHIVE/ANNOTATION_RELEASE.105/GFF/ref_GRCh37.p13_top_level.gff3.gz "
		"> {output}"
#chromosomes 9 and 11 are switched? I think NC_000009.11 is chr 9 and NC_000011.9 is chr 11
rule refSeqToBed:
	input:
		"data/refseq/ref_GRCh37.p13_top_level.gff3.gz"
	output:
		"data/refseq/ref_GRCh37.p13_top_level.bed.gz"
	shell:
		"""
		zcat {input} | grep '^NC' | grep '\sexon\s' | awk -F \"\\t\" -v OFS=\"\\t\" '{{print $1,$4-1,$5,$3,$6,$7}}' | \
		sed 's/NC_000001.10/1/g' | \
		sed 's/NC_000002.11/2/g' | \
		sed 's/NC_000003.11/3/g' | \
		sed 's/NC_000004.11/4/g' | \
		sed 's/NC_000005.9/5/g' | \
		sed 's/NC_000006.11/6/g' | \
		sed 's/NC_000007.13/7/g' | \
		sed 's/NC_000008.10/8/g' | \
		sed 's/NC_000009.11/9/g' | \
		sed 's/NC_000010.10/10/g' | \
		sed 's/NC_000011.9/11/g' | \
		sed 's/NC_000012.11/12/g' | \
		sed 's/NC_000013.10/13/g' | \
		sed 's/NC_000014.8/14/g' | \
		sed 's/NC_000015.9/15/g' | \
		sed 's/NC_000016.9/16/g' | \
		sed 's/NC_000017.10/17/g' | \
		sed 's/NC_000018.9/18/g' | \
		sed 's/NC_000019.9/19/g' | \
		sed 's/NC_000020.10/20/g' | \
		sed 's/NC_000021.8/21/g' | \
		sed 's/NC_000022.10/22/g' | \
		sed 's/NC_000023.10/X/g' | \
		sed 's/NC_000024.9/Y/g' | \
		sed 's/NC_012920.1/MT/g' | \
		sort -k 1,1 -k 2,2n | bedtools merge -i - | bgzip -c > {output}
		"""

rule indexRefSeqBed:
	input:
		vcf="data/refseq/ref_GRCh37.p13_top_level.bed.gz"
	output:
		"data/refseq/ref_GRCh37.p13_top_level.bed.gz.tbi"
	shell:
		"tabix {input}"

rule download1KGAutosomes:
	input:
	output:
			temp(expand("data/1KG/download/ALL.{contig}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz", contig=AUTOSOMES))
	run:
		for chr in AUTOSOMES:
			shell("wget -O data/1KG/download/ALL.{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz")


rule download1KGAutosomesIndex:
	input:
	output:
		temp(expand("data/1KG/download/ALL.{contig}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi", contig=AUTOSOMES))
	run:
		for chr in AUTOSOMES:
			shell("wget -O data/1KG/download/ALL.{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi")

rule filter1KGAutosomes:
	input:
		refseq="data/refseq/ref_GRCh37.p13_top_level.bed.gz",
		vcf="data/1KG/download/ALL.{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
		index="data/1KG/download/ALL.{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi"
	output:
		"data/1KG/1KG_{chr}.refSeq105.vcf.gz"
	shell:
		"bedtools intersect -header -a {input.vcf} -b {input.refseq} 2>/dev/null | bgzip -c > {output}"

rule download1KGGonosomes:
	input:
	output:
		mt=temp("data/1KG/download/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz"),
		x=temp("data/1KG/download/ALL.chrX.phase3_shapeit2_mvncall_integrated_v1b.20130502.genotypes.vcf.gz"),
		y=temp("data/1KG/download/ALL.chrY.phase3_integrated_v2a.20130502.genotypes.vcf.gz")
	shell:
		"wget -O {output.mt} ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz && "
		"wget -O {output.x} ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chrX.phase3_shapeit2_mvncall_integrated_v1b.20130502.genotypes.vcf.gz && "
		"wget -O {output.y} ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chrY.phase3_integrated_v2a.20130502.genotypes.vcf.gz "

rule download1KGGonosomesIndex:
	input:
	output:
		mt=temp("data/1KG/download/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz.tbi"),
		x=temp("data/1KG/download/ALL.chrX.phase3_shapeit2_mvncall_integrated_v1b.20130502.genotypes.vcf.gz.tbi"),
		y=temp("data/1KG/download/ALL.chrY.phase3_integrated_v2a.20130502.genotypes.vcf.gz.tbi")
	shell:
		"wget -O {output.mt} ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz.tbi && "
		"wget -O {output.x} ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chrX.phase3_shapeit2_mvncall_integrated_v1b.20130502.genotypes.vcf.gz.tbi && "
		"wget -O {output.y} ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chrY.phase3_integrated_v2a.20130502.genotypes.vcf.gz.tbi "


rule filter1KGGonosomes:
	input:
		refseq="data/refseq/ref_GRCh37.p13_top_level.bed.gz",
		mt="data/1KG/download/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz",
		x="data/1KG/download/ALL.chrX.phase3_shapeit2_mvncall_integrated_v1b.20130502.genotypes.vcf.gz",
		y="data/1KG/download/ALL.chrY.phase3_integrated_v2a.20130502.genotypes.vcf.gz",
		samples="scripts/samples.txt",
		yindex="data/1KG/download/ALL.chrY.phase3_integrated_v2a.20130502.genotypes.vcf.gz.tbi",
		mtindex="data/1KG/download/ALL.chrMT.phase3_callmom-v0_4.20130502.genotypes.vcf.gz.tbi",
		xindex="data/1KG/download/ALL.chrX.phase3_shapeit2_mvncall_integrated_v1b.20130502.genotypes.vcf.gz.tbi"
	output:
		x="data/1KG/1KG_chrX.refSeq105.vcf.gz",
		y="data/1KG/1KG_chrY.refSeq105.vcf.gz",
		mt="data/1KG/1KG_chrMT.refSeq105.vcf.gz"
	shell:
		"bedtools intersect -header -a {input.y} -b {input.refseq} 2>/dev/null | ruby scripts/addZeroIfSampleNotPresent.rb {input.samples} | bgzip -c > {output.y} && "
		"bedtools intersect -header -a {input.mt} -b {input.refseq} 2>/dev/null | ruby scripts/addZeroIfSampleNotPresent.rb {input.samples} | bgzip -c > {output.mt} &&"
		"bedtools intersect -header -a {input.x} -b {input.refseq} 2>/dev/null | bgzip -c > {output.x}"

rule index1KG:
	input:
		"data/1KG/1KG_{chr}.refSeq105.vcf.gz"
	output:
		"data/1KG/1KG_{chr}.refSeq105.vcf.gz.tbi"
	shell:
		"tabix {input}"

rule vcfConcat:
	input:
		vcf=expand("data/1KG/1KG_{contig}.refSeq105.vcf.gz", contig=CONTIGS),
		index=expand("data/1KG/1KG_{contig}.refSeq105.vcf.gz.tbi", contig=CONTIGS)
	output:
		"results/1KG/1KG.refSeq105.vcf.gz"
	shell:
		"bcftools concat {input.vcf} | bcftools view -v snps,indels - | bgzip -c > {output}"

rule indexVCFConcat1KG:
	input:
		"results/1KG/1KG.refSeq105.vcf.gz"
	output:
		"results/1KG/1KG.refSeq105.vcf.gz.tbi"
	shell:
		"tabix {input}"


# rule filterVCfsUsingAF:
# 	input:
# 		vcf="1KG.refSeq105.AF.vcf.gz",
# 		index="1KG.refSeq105.AF.vcf.gz.tbi"
# 	output:
# 		"1KG.refSeq105.AF.filter.vcf.gz"
# 	shell:
# 		"bcftools view -e 'AF[*] > 0.01 | AFR_AF[*] > 0.01 | AMR_AF[*] > 0.01 | EAS_AF[*] > 0.01 | EUR_AF[*] > 0.01 | EXAC_BEST_AF[*] > 0.1' {input.vcf} | bgzip -c > {output}"
#
# rule indexFilterVCfsUsingAF:
# 	input:
# 		"1KG.refSeq105.AF.filter.vcf.gz"
# 	output:
# 		"1KG.refSeq105.AF.filter.vcf.gz.tbi"
# 	shell:
# 		"tabix {input}"



##### ExAC ########

rule filterExAC:
	input:
		refseq="data/refseq/ref_GRCh37.p13_top_level.bed.gz",
		vcf="../../data/populationDBs/ExAC.r1.sites.vep.vcf.gz"
	output:
		vcf="results/ExAC/ExAC.refSeq105.vcf.gz",
		idx="results/ExAC/ExAC.refSeq105.vcf.gz.tbi"
	shell:
		"""
		bedtools intersect -header -a {input.vcf} -b {input.refseq} 2>/dev/null | bgzip -c > {output.vcf};
		tabix {output.vcf};
		"""

##### IRAN ############

configfile: "config.yml"
IRAN_FILES = config['IRAN_TRIO_FILES']

# Merge all Iranian samples into one file, correct missing genotypes and create a new index file.
rule mergeIRAN:
    input:
        expand("data/IRAN_trio/{files}.raw.vcf.gz", files=IRAN_FILES)
    output:
        merge="results/IRAN/IRAN_merge.vcf.gz",
        corref="results/IRAN/IRAN_merge_corref.vcf.gz",
        idx="results/IRAN/IRAN_merge_corref.vcf.gz.tbi"
    shell:
        """
        bcftools merge {input} -O z -o {output.merge};
	bcftools plugin missing2ref {output.merge} | sed 's/chr//g' | bgzip -c > {output.corref};
        tabix {output.corref};
        """

# Filter.
rule filterIRAN:
	input:
		refseq="data/refseq/ref_GRCh37.p13_top_level.bed.gz",
		vcf="results/IRAN/IRAN_merge_corref.vcf.gz",
		idx="results/IRAN/IRAN_merge_corref.vcf.gz.tbi"
	output:
		vcf="results/IRAN/IRAN.refSeq105.vcf.gz",
		idx="results/IRAN/IRAN.refSeq105.vcf.gz.tbi"
	shell:
		"""
		bedtools intersect -header -a {input.vcf} -b {input.refseq} 2>/dev/null | bgzip -c > {output.vcf};
		tabix {output.vcf};
		"""


##### Annotate DBs #####

rule annotateAFs:
	input:
		vcf="results/{background}/{background}.refSeq105.vcf.gz",
		db="../../data/jannovar/data/hg19_refseq.ser",
		jannovar="../../data/jannovar/jannovar-cli-0.21-SNAPSHOT.jar",
		exac="../../data/populationDBs/ExAC.r1.sites.vep.vcf.gz",
		uk="../../data/populationDBs/UK10K_COHORT.20160215.sites.vcf.gz",
		kg="../../data/populationDBs/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz",
		caddsnv="../../data/pathogenicityScores/whole_genome_SNVs.tsv.gz",
		caddindel="../../data/pathogenicityScores/InDels.tsv.gz",
		ref="../../data/referenceGenome/data/human_g1k_v37.fasta"
	output:
		"results/{background}/{background}.refSeq105.AF.vcf.gz"
	run:
		if wildcards.background == '1KG':
			shell("""
			java -jar {input.jannovar} annotate-vcf -d {input.db} \
			--exac-vcf {input.exac} --uk10k-vcf {input.uk} \
			--tabix {input.caddsnv} {input.caddindel} --tabix-prefix CADD_SNV_ CADD_INDEL_ \
			--ref-fasta {input.ref} \
			-o '{output}' -i '{input.vcf}'
			""")
		else:
			shell("""
                        java -jar {input.jannovar} annotate-vcf -d {input.db} \
                        --exac-vcf {input.exac} --uk10k-vcf {input.uk} --1kg-vcf {input.kg} \
                        --tabix {input.caddsnv} {input.caddindel} --tabix-prefix CADD_SNV_ CADD_INDEL_ \
                        --ref-fasta {input.ref} \
                        -o '{output}' -i '{input.vcf}'
                        """)

rule indexAnnotateAFs:
	input:
		"results/{background}/{background}.refSeq105.AF.vcf.gz"
	output:
		"results/{background}/{background}.refSeq105.AF.vcf.gz.tbi"
	shell:
		"tabix {input}"
