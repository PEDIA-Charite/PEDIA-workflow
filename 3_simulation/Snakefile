configfile: "../config.yml"

subworkflow vcfs_workflow: 
	workdir: "../data/PEDIA/vcfs"
	snakefile: "../data/PEDIA/vcfs/Snakefile"

subworkflow background_workflow: 
	workdir: "background"
	snakefile: "background/Snakefile"

def allSamples(a,b):
	samples = []
	samples.extend(a)
	samples.extend(b)
	return samples

SINGLE_SAMPLES = config['SINGLE_SAMPLES']
VCF_SAMPLES = config['VCF_SAMPLES']
SAMPLES = allSamples(SINGLE_SAMPLES, VCF_SAMPLES)

BACKGROUNDS=["1KG","ExAC","IRAN"]
PLOTS=['ROC','percentile','PRC','balanced-accuracy','recall','precision','f-score']



rule all:
	input:
		expand("vcf_simulation/{background}/{sample}.vcf.gz", sample=SAMPLES, background=BACKGROUNDS),
		expand("json_simulation/{background}/CV/{sample}.json", sample=SAMPLES, background=BACKGROUNDS),
		expand("vcf_annotation/{sample}.annotation.vcf.gz", sample=VCF_SAMPLES, background=BACKGROUNDS),
		expand("vcf_annotation/{sample}.annotation.vcf.gz.tbi", sample=VCF_SAMPLES, background=BACKGROUNDS),
		expand("json_simulation/real/test/{sample}.json", sample=VCF_SAMPLES, background=BACKGROUNDS),
		expand("json_simulation/real/train/{background}/{sample}.json", sample=SINGLE_SAMPLES, background=BACKGROUNDS),
		expand("performanceEvaluation/data/CV/{background}.csv", background=BACKGROUNDS),
		expand("performanceEvaluation/data/Real/train_{background}.csv", background=BACKGROUNDS),
		"performanceEvaluation/data/Real/test_real.csv",
		expand("performanceEvaluation/results/CV.{background}.tsv.gz", background=BACKGROUNDS),
		expand("performanceEvaluation/results/real.{background}.tsv.gz", background=BACKGROUNDS),
		expand("performanceEvaluation/results/{type}.{background}.arff.gz",background=BACKGROUNDS,type=["CV","real"]),
		expand("performanceEvaluation/plots/{type}/{plot}.ExAC.1KG.IRN.pdf",type=["CV","real"],plot=PLOTS)





rule annotate:
	input:
		vcf="../data/PEDIA/mutations/{sample}.vcf.gz",
		db="../data/jannovar/data/hg19_refseq.ser",
		exac="../data/populationDBs/ExAC.r1.sites.vep.vcf.gz",
		uk="../data/populationDBs/UK10K_COHORT.20160215.sites.vcf.gz",
		kg="../data/populationDBs/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz",
		caddsnv="../data/pathogenicityScores/whole_genome_SNVs.tsv.gz",
		caddindel="../data/pathogenicityScores/InDels.tsv.gz",
		ref="../data/referenceGenome/data/human_g1k_v37.fasta"
	output:
		"mutations/{sample}_JsonsVCF_annotated.vcf.gz"
	shell:
		"""
		java -jar ../data/jannovar/jannovar-cli-0.21-SNAPSHOT.jar annotate-vcf -d {input.db} \
		--exac-vcf {input.exac} --uk10k-vcf {input.uk} --1kg-vcf {input.kg} \
		--tabix {input.caddsnv} {input.caddindel} --tabix-prefix CADD_SNV_ CADD_INDEL_ \
		--ref-fasta {input.ref} \
		-o '{output}' -i '{input.vcf}'
		"""


rule index:
	input:
		"mutations/{sample}_JsonsVCF_annotated.vcf.gz"
	output:
		"mutations/{sample}_JsonsVCF_annotated.vcf.gz.tbi"
	shell:
		"tabix '{input}'"



rule ExAC_genotypes:
	input:
		vcf = background_workflow("results/ExAC/ExAC.refSeq105.AF.vcf.gz"),
		index = background_workflow("results/ExAC/ExAC.refSeq105.AF.vcf.gz.tbi")
	output:
		"background/results/ExAC/genotypes/ExAC.refSeq105.AF.NFE.{sample}.vcf.gz"
	shell:
		"""
		java -jar simdrom/simdrom-cli-0.0.3-SNAPSHOT.jar -b {input.vcf} -bAChom Hom_NFE -bAChet Het_NFE -bAChemi Hemi_NFE -bAN AN_NFE -n NFE.{wildcards.sample} --output {output}
		"""

def getBackground(wc):
	if wc.background == "1KG":
		return [background_workflow("results/1KG/1KG.refSeq105.AF.vcf.gz"), background_workflow("results/1KG/1KG.refSeq105.AF.vcf.gz.tbi")]
	elif wc.background == "ExAC":
		return expand("background/results/ExAC/genotypes/ExAC.refSeq105.AF.NFE.{sample}.vcf.gz", sample=[wc.sample])
	elif wc.background == "IRAN":
		return [background_workflow("results/IRAN/IRAN.refSeq105.AF.vcf.gz"), background_workflow("results/IRAN/IRAN.refSeq105.AF.vcf.gz.tbi")]


rule spikein:
	input:
		index="mutations/{sample}_JsonsVCF_annotated.vcf.gz.tbi",
		vcf="mutations/{sample}_JsonsVCF_annotated.vcf.gz",
		omim="OMIM/genemap2.txt",
		back=getBackground,
		#back_1kg="background/results/1KG/1KG.refSeq105.AF.vcf.gz",
		#back_exac="background/results/ExAC/genotypes/ExAC.refSeq105.AF.NFE.{sample}.vcf.gz",
		#back_iran="background/results/IRAN/IRAN.refSeq105.AF.vcf.gz"
	output:
		"vcf_simulation/{background}/{sample}.vcf.gz"
	run:
		if wildcards.background == "ExAC":
			shell("java -jar simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar spikein -o {input.omim} -out {output} -v '{input.back}' -m '{input.vcf}' --sample '{wildcards.sample}'")
		else:
			shell("java -jar simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar spikein -o {input.omim} -out {output} -v '{input.back[0]}' -m '{input.vcf}' --sample '{wildcards.sample}'")
	'''
		if not containsVcf(wildcards):
			if wildcards.background == "1KG":
				shell("java -jar simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar spikein -o {input.omim} -out vcf_simulation/{wildcards.background}/ -v {input.back_1kg} -m {input.vcf} --sample {wildcards.sample}")
			elif wildcards.background == "ExAC":
				shell("java -jar simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar spikein -o {input.omim} -out vcf_simulation/{wildcards.background}/ -v {input.back_exac} -m {input.vcf} --sample {wildcards.sample}")
			elif wildcards.background == "IRAN":
				shell("java -jar simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar spikein -o {input.omim} -out vcf_simulation/{wildcards.background}/ -v {input.back_iran} -m {input.vcf} --sample {wildcards.sample}")
	'''


rule json:
	input:
		vcf="vcf_simulation/{background}/{sample}.vcf.gz",
		omim="OMIM/genemap2.txt",
		json="../data/PEDIA/jsons/phenomized/{sample}.json",
		simulator="simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar"
	output:
		"json_simulation/{background}/CV/{sample}.json"
	shell:
		"java -jar {input.simulator} extendjson -j {input.json} -v {input.vcf} -o {input.omim} -out {output}"


################### REAL VCFS################################

def getRealVCF(wc):
	configfile: "../data/PEDIA/jsons/phenomized/%s.json" % wc.sample
	filename = config['vcf'][0].split('/')[-1]
	vcf_index = "annotated_vcfs/%s_annotated.vcf.gz.tbi" % filename[0:-7]
	vcf = vcf_index[0:-4] 
	return [vcfs_workflow(vcf), vcfs_workflow(vcf_index)]

rule copyReal:
	input:
		vcf=getRealVCF,
		json="../data/PEDIA/jsons/phenomized/{sample}.json"
	output:
		vcf="vcf_annotation/{sample}.annotation.vcf.gz",
		index="vcf_annotation/{sample}.annotation.vcf.gz.tbi"
	shell:
		"""
		cp {input.vcf[0]} {output.vcf}
		cp {input.vcf[1]} {output.index}
		"""

rule jsonRealTestData:
	input:
		vcf="vcf_annotation/{sample}.annotation.vcf.gz",
		omim="OMIM/genemap2.txt",
		json="../data/PEDIA/jsons/phenomized/{sample}.json",
		simulator="simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar"
	output:
		"json_simulation/real/test/{sample}.json"
	shell:
		"""
		java -jar -Xmx20g {input.simulator} extendjson \
		-j {input.json} -v {input.vcf} -o {input.omim} -out {output}
		"""

rule jsonRealTrainData:
	input:
		"json_simulation/{background}/CV/{sample}.json"
	output:
		"json_simulation/real/train/{background}/{sample}.json"
	shell:
		"""
		ln {input} {output}
		"""
#################################################################
# Copy the simulated JSON files of cases with real exome to
# real/test_{backgound} as testing set
# The goal is to compare the performace bewteen using simulated
# and real exome
#################################################################

rule jsonRealTrainiSimData:
	input:
		"json_simulation/{background}/CV/{sample}.json"
	output:
		"json_simulation/real/test_{background}/{sample}.json"
	shell:
		"""
		ln {input} {output}
		"""

#################################################################
# Generate the JSON file of case with unknown diagnosis
#################################################################

rule jsonRealUnknownTestData:
	input:
		vcf="vcf_annotation/{sample}.annotation.vcf.gz",
		omim="OMIM/genemap2.txt",
		json="../data/PEDIA/jsons/phenomized/{sample}.json",
		simulator="simulator/pedia-simulator-0.0.1-SNAPSHOT-jar-with-dependencies.jar"
	output:
		"json_simulation/real/unknown_test/{sample}.json"
	shell:
		"""
		java -jar -Xmx20g {input.simulator} extendjson \
		-j {input.json} -v {input.vcf} -o {input.omim} -out {output}
		"""


#################################################################
# performance evaluation
# Generate all JSON files for CV on three background
#################################################################

rule createCsvTrain:
	input:
		expand("json_simulation/{{background}}/CV/{sample}.json", sample=SAMPLES),
		script="scripts/jsonToTable.py"
	output:
		"performanceEvaluation/data/CV/{background}.csv"
	params:
		folder="json_simulation/{background}/CV"
	shell:
		"""
		python {input.script} -i {params.folder} -o {output}
		"""

#################################################################
# Generate all JSON files of cases with real exome as test set
#################################################################

rule createCsvRealTest:
	input:
		expand("json_simulation/real/test/{sample}.json", sample=VCF_SAMPLES),
		script="scripts/jsonToTable.py"
	output:
		"performanceEvaluation/data/Real/test_real.csv"
	params:
		folder="json_simulation/real/test"
	shell:
		"""
		python {input.script} -i {params.folder} -o {output}
		"""

#################################################################
# Generate all JSON files of cases with real exome as test set
# using simulated exome instead of real exomes to compare the 
# performance between simulated and real exome
#################################################################

rule createCsvRealSimTest:
	input:
		expand("json_simulation/real/test_{background}/{sample}.json", sample=VCF_SAMPLES, background=BACKGROUNDS),
		script="scripts/jsonToTable.py"
	output:
		"performanceEvaluation/data/Real/test_simulated_{background}.csv"
	params:
		folder="json_simulation/real/test_{background}"
	shell:
		"""
		python {input.script} -i {params.folder} -o {output}
		"""

#################################################################
# Generate all JSON files of cases with simulated exome as 
# training set
#################################################################

rule createCsvRealTrain:
	input:
		expand("json_simulation/real/train/{{background}}/{sample}.json", sample=SINGLE_SAMPLES),
		script="scripts/jsonToTable.py"
	output:
		"performanceEvaluation/data/Real/train_{background}.csv"
	params:
		folder="json_simulation/real/train/{background}"
	shell:
		"""
		python {input.script} -i {params.folder} -o {output}
		"""

rule trainCV:
	input:
		table="performanceEvaluation/data/CV/{background}.csv",
		script="scripts/CV.py"
	output:
		"performanceEvaluation/results/CV.{background}.tsv.gz"
	params:
		repetitons="30"
	shell:
		"""
		python {input.script} -i {input.table} --pfile {output} -r {params.repetitons}
		"""

rule trainSimTestReal:
	input:
		train="performanceEvaluation/data/Real/train_{background}.csv",
		test="performanceEvaluation/data/Real/test_real.csv",
		script="scripts/trainTest.py"
	output:
		"performanceEvaluation/results/real.{background}.tsv.gz"
	params:
		repetitons="30"
	shell:
		"""
		python {input.script} --train {input.train} --test {input.test} --prediction {output} --repetitions {params.repetitons}
		"""
rule createArffFromPredictions:
	input:
		"performanceEvaluation/results/{type}.{background}.tsv.gz"
	output:
		"performanceEvaluation/results/{type}.{background}.arff.gz"
	shell:
		"""
		java -jar performanceEvaluation/remm-cli-0.0.4-SNAPSHOT-jar-with-dependencies.jar evaluate-score --class-column 1 --class-index 1 --prediction-column 2 --score {input}  --score-type PREDICTION --evaluate-output {output}
	"""

rule plottingData:
	input:
		exac_pred="performanceEvaluation/results/{type}.ExAC.tsv.gz",
		exac_arff="performanceEvaluation/results/{type}.ExAC.arff.gz",
		iran_pred="performanceEvaluation/results/{type}.IRAN.tsv.gz",
		iran_arff="performanceEvaluation/results/{type}.IRAN.arff.gz",
		kg_pred="performanceEvaluation/results/{type}.1KG.tsv.gz",
		kg_arff="performanceEvaluation/results/{type}.1KG.arff.gz",
	params:
		data="performanceEvaluation/plots/{type}",
		exac="ExAC",
		iran="IRN",
		kg="1KG"
	output:
		expand("performanceEvaluation/plots/{{type}}/{plot}.ExAC.1KG.IRN.pdf",plot=PLOTS)
	shell:
		"""
		Rscript scripts/create_roc_PRC_plots.R \
		{input.exac_pred} {input.exac_arff} '{params.exac}' \
		{input.kg_pred} {input.kg_arff} '{params.kg}' \
		{input.iran_pred} {input.iran_arff} '{params.iran}' \
		{params.data}
		"""
