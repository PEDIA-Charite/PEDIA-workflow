import re
import os
import datetime
import json

from configparser import ConfigParser
from trello import TrelloClient

from lib.processor import Processor
from lib.model.case import Case

RE_CASE_ID = re.compile(r"[_.\d]{4,7}")

def find_case_id(data):
    match = RE_CASE_ID.findall(data)
    return [m for m in match if m.isnumeric()]


class Markdowner:

    signature = "generated by == PEDIA Bot =="

    def __init__(self):
        self.md_table = {
            "node": self.parse_model,
            "inline": self.parse_inline,
            "text": lambda x: x,
            "h1": "# {}".format,
            "h2": "## {}".format,
            "code": "```\n{}\n```".format,
            "bold": "**{}**".format,
            "italic": "__{}__".format,
            "icode": "`{}`".format,
        }
        self.dom = []

    def create_header(self):
        return [
            ("h1", "# Additional case information")
        ]

    def create_footer(self):
        model = [
            ("text", self.signature),
        ]
        return model

    def parse(self, model, sep):
        parsed = sep.join(
            [
                self.md_table[mtype](data)
                for mtype, data in model
            ]
        )
        return parsed

    def parse_model(self, model):
        return self.parse(model, "\n\n")

    def parse_inline(self, model):
        return self.parse(model, " ")

    def get_text(self):
        model = self.create_header()
        model += self.dom
        model += self.create_footer()
        return self.parse_model(model)

    def __repr__(self):
        return self.get_text()


class CaseComment(Markdowner):

    def __init__(self, cases, processor=None):
        super().__init__()
        self.processor = processor

        self.dom = self.cases_to_dom(cases)

    def cases_to_dom(self, cases):
        model = [
            ("node", self.create_case_info(cid, case))
            for cid, case in cases.items()
        ]
        return model

    def create_case_info(self, case_id, case):
        model = [
            ("h2", case_id),
        ]

        if isinstance(case, Case):
            submitter_info = "submitted by {name} ({email}), {team}".format(
                **case.submitter
            )
            model.append(
                ("text", submitter_info),
            )

            if self.processor:
                qc_info = self.processor.logs.get_case_info(case_id)
                model += [
                    ("bold", "QC Information"),
                    ("code", json.dumps(qc_info, indent=4)),
                ]

            ge_info = case.data.get_js()["genomic_entries"]
            var_info = [str(v) for v in case.get_variants()]
            model += [
                ("bold", "Genomic entry information"),
                ("text", "Raw json data:"),
                ("code", json.dumps(ge_info, indent=4)),
                ("text", "Parsed variants:"),
                ("code", json.dumps(var_info, indent=4)),
            ]

            # diagnosis information
            model += [
                ("bold", "Diagnosis information"),
                ("text", "Unparsed data:"),
                ("code", json.dumps(
                    case.data.get_js()["selected_syndromes"], indent=4
                )),
                ("text", "Parsed syndrome data:"),
                ("code", json.dumps(
                    case.get_diagnosis(), indent=4
                ))
            ]
            # features information
            model += [
                ("bold", "Selected features"),
                ("code", json.dumps(case.get_features(), indent=4))
            ]

            # score information
            score_stats = case.
            model += [
                ("bold", "Scores overview"),
                ("code", json.dumps(score_stats, indent=4))
            ]
        else:
            model.append(("text", "Could not find {}".format(case_id)))

        return model

    def create_footer(self):
        last_update = "Information last updated {}".format(
            datetime.datetime.now().isoformat()
        )
        model = [
            ("text", last_update),
        ]
        model += super().create_footer()
        return model


class TrelloBot:

    # targets = ["Todo", "In progress"]
    targets = ["Todo"]

    def __init__(
            self,
            conf_path="trello/trello.ini",
            process_config="config.ini"
    ):

        self.config = ConfigParser()
        self.config.read(conf_path)

        self.processor = Processor(process_config)

        self.client = TrelloClient(
            api_key=self.config["trello"]["key"],
            api_secret=self.config["trello"]["token"],
        )

        self.id = self.config["trello"]["member_id"]

        self.board = self.client.get_board(
            self.config["trello"]["board_id"]
        )
        print(self.board)

        self.lists = self.get_lists()

    def update(self):
        matched_cards = self.get_cards_with_case()

        self.process_cards_with_case(matched_cards)

    def get_lists(self):
        return [
            l
            for l in self.board.get_lists("open")
            if l.name in self.targets
        ]

    def get_all_cards(self):
        return [
            c
            for l in self.lists
            for c in l.list_cards()
        ]


    def get_cards_with_case(self):
        cards = self.get_all_cards()
        matched = [
            (card, found) for card, found in
            [(c, find_case_id(c.name)) for c in cards]
            if found
        ]

        return matched

    def get_own_comments(self, comments):
        own_comments = [
            c for c in comments
            if c["idMemberCreator"] == self.id
        ]
        return own_comments

    def is_bot_comment(self, comment):
        return Markdowner.signature in comment["data"]["text"]


    def process_cards_with_case(self, matched_list):
        for card, matched in matched_list:
            print(card, matched)
            card.fetch()
            comments = self.get_own_comments(card.fetch_comments())

            bot_comments = [c for c in comments if self.is_bot_comment(c)]

            cases = {
                m: self.processor.json_to_case(j) if j else j for m, j in
                [(m, self.processor.load_json(m)) for m in matched]
            }

            comment_text = str(CaseComment(cases, self.processor))

            if bot_comments:
                # get comment id
                comment_id = bot_comments[0]["id"]
                card.update_comment(comment_id, comment_text)
            else:
                card.comment(comment_text)

            print("------")


bot = TrelloBot()

bot.update()
